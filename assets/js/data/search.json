[ { "title": "树莓派调色 RGB LED", "url": "/posts/raspberry_pi_rgb/", "categories": "树莓派", "tags": "", "date": "2022-07-21 00:00:00 +0800", "snippet": "RGB 或者三原色大家应该都听说过：通过红（Red）、绿（Green）、蓝（Blue）三种基本颜色可以“合成”其它各种颜色，譬如：红+绿=黄，绿+蓝=青，红+蓝=洋红等等。但是，更准确一点的说法应该是：将 RGB 以不同的比例混合后，对人的眼睛可以形成与各种频率的可见光等效的色觉。直白一点就是：RGB 的组合欺骗了人眼/脑，让人感觉是看到了其它颜色，这是由人的生理原因造成的，并非出于物理原因。颜色理论中有很多概念以及定义，其中跟原色相关的有加色法和减色法，它说的是：相同颜色的透明物体和不透明物体，对光的处理不一样。譬如：绿色透明物体，它透过绿光，吸收其他色光，因此人眼看到绿色；绿色不透明物体，它反射绿光，吸收其他色光，因此人眼看到绿色。虽然都看到了绿色，透明物体是由于光的透射，不透明物体是由于光的反射。由此原色也可以分为两类，一类基于透射，一类基于反射，感兴趣的同学可以去 Wiki 上再看看。 三原色光模式，RGB 为三原色。 印刷四分色模式，CMYK（Cyan、Magenta、Yellow、blacK）为四分色。以上是一点点理论知识，下面看看实践部分。在线调色Colors RGB 可以在线调整 RGB 的值以得到不同的颜色，方便好奇的同学了解 RGB。补充说明下 RGB 的表达方式，常见的有两种：rgb(255, 0, 0)、#ff0000。 rgb(xxx, xxx, xxx) 的方式，三个值分别表示 R、G、B 的大小，最大值为 255 (8 bit) #ff0000 的方式，是 rgb 的 十六进制表达方式，总共 6 个字符，前 2 个字符表示 R 的大小，00 到 FF 对应十进制的 0 到 255，中间 2 个字符表示 G 的大小，最后两个字符表示 B 的大小。LED 调色借助于 RGB LED（电子市场零售大概几毛一个），树莓派也可以实现单 LED 的调色。先看看效果（拍照有炫光，实际的灯光效果比图片好）：下面是硬件连接电路：黑色线接共阴极，红、绿、蓝三根线分别接 R、G、B 的阳极，限流电阻可以选择 220Ω（3.3v/220Ω=15mA）。接下来是代码，鉴于大多数情况下树莓派都是放在角落里做为微型服务器用，一般不接显示器，因此代码就选择 C/S 模式：手头的电脑做 Client 通过 GUI 进行 RGB 值的调整；角落的树莓派做 Server 接收 Client 传过来的值对 LED 进行颜色调整，结构图如下。┌────Client─────┐ ┌────Server─────┐│ │ │ ││ ┌───────────┐ │ │ ┌───────────┐ ││ │ GUI │ │ │ │ LED │ ││ └─────┬─────┘ │ │ └─────▲─────┘ ││ │ │ │ │ ││ │ │ │ │ ││ ┌────▼────┐ │ │ ┌────┴────┐ ││ │ R G B ├──┼──────http──────┼──► R G B │ ││ └─────────┘ │ │ └─────────┘ ││ │ │ │└───────────────┘ └───────────────┘Client 代码如下，需要安装 tkinter 模块，macOS 下命令： brew install python-tk@3.10，其它系统大家自行搜索吧，代码中需要根据自己实际情况进行调整的地方是 IP，要改成实际的树莓派 IP。from tkinter import *import urllib.requestdef init_scale(): Scale( window, orient=HORIZONTAL, from_=0, to=255, length=200, variable=r, background=\"#ff0000\", command=updateRGB ).pack() Scale( window, orient=HORIZONTAL, from_=0, to=255, length=200, variable=g, background=\"#00ff00\", command=updateRGB ).pack() Scale( window, orient=HORIZONTAL, from_=0, to=255, length=200, variable=b, background=\"#0000ff\", command=updateRGB ).pack() window.mainloop()def updateRGB(event): print(event) url = f\"http://{IP}:{PORT}?r={r.get()/MAX}&amp;g={g.get()/MAX}&amp;b={b.get()/MAX}\" response = urllib.request.urlopen(url) print(response.read().decode('utf-8'))if __name__ == \"__main__\": window = Tk() window.title(\"RGB\") r = IntVar() g = IntVar() b = IntVar() MAX = 255.0 IP = \"192.168.0.2\" PORT = \"8080\" init_scale()Server 代码如下，需要安装 gpiozero 模块（一个树莓派下非常好用的 GPIO 库），代码中需要根据自己实际情况进行调整的地方是 RED、GREEN、BLUE，要改成实际连接的树莓派管脚。from http import HTTPStatusfrom http.server import BaseHTTPRequestHandler, HTTPServerfrom urllib.parse import parse_qs, urlparsefrom gpiozero import RGBLEDclass Handler(BaseHTTPRequestHandler): def do_GET(self): parsed = urlparse(self.path) rgb = parse_qs(parsed.query) led.color = (float(rgb['r'][0]), float(rgb['g'][0]), float(rgb['b'][0])) self.send_response(HTTPStatus.OK) self.end_headers() self.wfile.write(bytes(str(rgb), \"utf-8\"))if __name__ == \"__main__\": RED = 9 GREEN = 10 BLUE = 11 PORT = 8080 led = RGBLED(red=RED, green=GREEN, blue=BLUE) httpd = HTTPServer(('', PORT), Handler) httpd.serve_forever()启动时，Server 代码存放在树莓派上保存为 rgb-server.py 文件，通过命令 sudo python3 rgb-server.py 启动；Client 代码存放在自己电脑上保存为 rgb-client.py 文件，通过命令 python3 rgb-client.py 启动。" }, { "title": "Linux 简介", "url": "/posts/linux_introduce/", "categories": "Linux", "tags": "", "date": "2022-06-03 00:00:00 +0800", "snippet": "Linux 大家或多或少都听过，通常 Linux 可以理解为与 Windows、macOS 等价的另一种操作系统，但更细节点它还有很多概念：Linux 内核、Linux 发行版、GUN/Linux 等等，这篇文章对这些概念以及 Linux 的特点、历史做个简介。Linux 是什么大家日常谈论的 Linux 其全称应该为 Linux 发行版（Distribution/Distro），譬如 Ubuntu、Debian、Red Hat、CentOS 等等。真正的 Linux 其实是指 Linux 内核，用下边的示意图来说明：Linux 内核包含内核和系统调用两层，对内（硬件）实现设备驱动、进程/内存/IO管理，对外提供系统调用接口；Linux 发行版则是在内核上又增加了应用程序。从个人用户使用角度上说，Linux 发行版对标 Windows、macOS，其有鲜明的特点和缺点： 免费的“正版”系统 不像 Windows 需要激活密钥、macOS 需要购买昂贵的机器才能使用，使用 Linux 不需要支付任何费用，而且大多数 Linux 的软件也是免费的。由于 Linux 自由开源的特点，Linux 系统不存在所谓的盗版问题。 真正的多用户支持 Linux 系统管理的软硬件资源可以“同时”被不同用户登录和使用，每个用户对自己的资源有特定的权限，互不影响。 良好的可移植性 Linux 系统经常被应用在嵌入式设备上，像电视、机顶盒、手机、移动设备、路由器等。 专业软件支持不足 虽然很多专业软件在 Linux 系统上都有对应开源的替代软件，譬如 Matlab 的替代 GNU Octave，但这无疑增加了用户的学习成本。 游戏支持不足 不得不承认 Linux 上的大型游戏不如 Windows，但随着 2022 年 5 月 11 日 NVIDIA 宣布以 GPL/MIT 双重许可正式开源其 Linux GPU 内核模块，或许 Linux 上大型游戏的缺失能有所改善，但有没有游戏也不太重要。 Unix/Linux 历史Linux 的诞生离不开 Unix 操作系统、GNU 计划，它的壮大则离不开 POSIX 标准和 Internet。1. UnixUnix 前身是贝尔实验室 Ken Thompson 用汇编语言写的 Unics，1971-1973 年 Unics 被 Dennis Ritchie 用 C 语言重写后便称为 Unix。1969 年之前：Multics 系统早期的计算机大多用于军事领域或者学术研究，并不像现在的个人计算机这样普遍，并且由于操作系统的限制，当有多人想同时使用同一部主机时，就需要排队等待。为了解决多人同时使用的问题，1960 年代初 MIT 开发了划时代的兼容分时系统 CTSS（Compatible Time-Sharing System），让大型主机可以通过终端机（Terminal）联机的方式使用。CTSS 解决了多人同时使用的问题，但当时先进的主机最多也只能供 30 个终端机同时接入。为了进一步利用大型主机的资源，1965 年左右贝尔实验室、MIT 和 GE 共同发起了 Multics（Multiplexed Information and Computing System）计划，目的是让大型主机可以同时供 300 个以上的终端机接入。 但到 1969 年前后，由于计划进度落后、资金短缺，贝尔实验室判断 Multics 项目不可能取得成功，选择退出了该计划。1969 年：Unics 系统贝尔实验室虽然退出了 Multics 计划，但参其中的工程师却从该计划中获得了一些灵感，Ken Thompson 就是其中一位。1969 年 8 月左右，Thompson 为了移植自己编写的太空旅游（Space Travel）游戏，用汇编语言写了一个内核、一些内核工具程序，以及一个小的文件系统。Thompson 将 Multics 复杂的系统进行了简化，因此同实验室的同事称这个系统为 Unics，其文件系统有两个重要思想： 所有的程序或系统设备都是文件 不管建构编辑器还是附属文件，程序只有一个目的，就是要有效的完成目标。这就是著名的 KISS（Keep It Simple, Stupid）原则。1973 年：Unix 内核Thompson 写的 Unics 操作系统因为非常好用，在贝尔实验室内部广为流传，并且经过多次改版。但因其是用汇编语言写的，高度依赖硬件，加上当时的计算机架构都不太相同，所以每次要安装到不同的机器都要重新编写汇编语言，很不方便。后来 Thompson 与 Dennis Ritchie 便合作想将 Unics 改用更高级的程序语言来编写，从而提高可移植性。 他们先选择了 BCPL（简称 B 语言），然后又尝试 PASCAL，发现编译出来的内核性能都不是很好，因为这些语言都不太贴近硬件操作。 于是，两人（主要是 Ritchie）决定自己开发一套新的语言：C 语言。 Ritchie 将 B 语言重新改写成 C 语言，再用 C 语言重新改写并编译 Unics 内核，发行出 Unix 的正式版本。1977 年：BSD 分支Unix 用 C 语言重写后，可移植性非常好，只要获得其源码，再针对大型主机的特性加以修改就可以将 Unix 移植到另一部不同的主机上。1973 年以后，Unix 开始与学术界合作开发，最重要的就是与加州大学伯克利分校（Berkeley）的合作。 伯克利大学的 Bill Joy 在取得 Unix 内核源码后，修改成了适合自己机器的版本，并增加了很多工具软件与编译程序，最终将它命名为 Berkeley Software Distribution（BSD）。BSD 是 Unix 很重要的一个分支，Bill Joy 也是 Sun 公司的创办者，Sun 公司即是以 BSD 发展的内核进行自己的商业 Unix 版本的开发，后来可以安装在 x86 硬件架构上的 FreeBSD 也是从 BSD 改版而来。1979 年：System V 第七版 Unix早年的 Unix 只能安装在服务器或者大型工作站上。 直到 1979 年，AT&amp;T 推出了 System V 第七版 Unix，这一版最重要的特色是可以支持 x86 架构的个人计算机，也就是说 System V 可以在个人计算机上面安装与运行了。不过 AT&amp;T 出于商业考虑，想将 Unix 的版权收回去，AT&amp;T 在 1979 年发行的第七版 Unix 中，特别提出了不可对学生提供源码的严格限制。目前被称为纯种 Unix 的就是 System V 和 BSD 这两套系统。2. Linux由于 Unix 的商业化，Andrew Tannebaum 教授为了能给教学科研提供一个操作系统，开发了 Minix 操作系统以便不受 AT&amp;T 许可协议的约束。Linus Torvalds 则在 Minx 之上进行了深入学习，开发出了 Linux 内核。1984 年：Minix 系统AT&amp;T 在第七版 Unix 中的版权声明严重影响了学校教 Unix 内核源码的教授，导致课程无法开展。 从 1984 年开始，Andrew Tanenbaum 教授为了教学目的，决定自己写一个和 Unix 兼容的 Unix Like 内核，为了避免版权纠纷，Tanenbaum 完全不看 Unix 内核源码，因其是一个 Mini 版的 Unix 系统，所以称为 Minix。直到 1986 年 Minix 编写完成。Minix 必须通过磁盘磁带购买，但售价便宜，随磁盘还会附上 Minix 源码，这样用户可以学习 Minix 的内核程序设计概念。Minix 受到了用户的欢迎，很多用户强烈要求 Tanenbaum 教授对 Minix 持续改进，但是Tanenbaum 教授只把 Minix 定位在教育用途上面，所以无心对 Minix 持续开发。无奈之下，芬兰赫尔辛基大学的学生 Linus Torvalds 在对 Minix 进行研究学习后，开发了日后改变全世界的 Linux 内核。1984年：GNU 计划在 Tanenbaum 教授开始编写 Minix 的同年，Richard Stallman 发起了 GNU 计划，旨在建立一个自由开放的Unix 操作系统（FreeUnix）。 GNU 计划领导了计算机产业轰轰烈烈的自由软件运动，实现了 Unix 下绝大部分的开源工具软件集合和函数库，为开源世界做出了卓越的贡献。但是 GNU 计划一直缺少一个真正自由的 Unix 内核，虽然 GNU 计划也有自己的内核项目 hurd，但由于开发人员对 hurd 要求过于严苛，导致其迟迟无法推出。 直到 1991 年 Linus Torvalds 编写的 Linux 内核出现才弥补了这一空白。1984 年：X Window System除了 Minix 和 GNU 计划，用户对图形用户界面（Graphical User Interface, GUI）的需求， 促使 MIT 与其他第三方于 1984 年首次发布了 X Window System，为日后 Linux 图形界面的发展奠定了基础。4 年后的 1988 年，MIT 成立非营利性组织 XFree86（X Window System + Free + x86 的简写），XFree86 图形界面于 1994 年整合进Linux 内核 1.0 版。1991 年：Linux 内核Linus Torvalds 于 1991 年在 BBS 上发布了一则消息，说以 bash、gcc 等 GNU 工具编写了一个内核，可以在 386 机器上运行。下边是他的原文：Hello everybody out there using minix -I'm doing a (free) operating system (just a hobby, won't be big andprofessional like gnu) for 386(486) AT clones. This has been brewingsince april, and is starting to get ready. I'd like any feedback onthings people like/dislike in minix, as my OS resembles it somewhat(same physical layout of the file-system (due to practical reasons)among other things).I've currently ported bash(1.08) and gcc(1.40), and things seem to work.This implies that I'll get something practical within a few months, andI'd like to know what features most people would want. Any suggestionsare welcome, but I won't promise I'll implement them :-)之后 Linus Torvalds 开始把一些 Unix 上的软件放在 Linux 上跑，但很多软件无法运行。这种情况下，一个办法是修改软件，让它们可以在 Linux 上跑；另一个则是修改 Linux，让 Linux 符合软件运行的规范。Linus Torvalds 希望 Linux 希望能够兼容 Unix，于是选择了参考 POSIX 标准去修改 Linux。POSIX 是可携式操作系统接口（Portable Operating System Interface），其规范了内核与应用程序之间的接口，按 POSIX 标准设计的内核是可以直接运行按 POSIX 标准开发的软件的。Linux 的发展依据了 POSIX 标准，同时 Unix 上的软件也是遵循这个标准开发的，因比 Linux 很容易就与 Unix 共享软件了。因为 Linux 放在网上供大家下载，越来越多的用户开始使用并参与改进，这又进一步促进了 Linux 的发展。下边是整个 Unix/Linux 的发展年表。Linux 学习如果你因为科研、学习、工作或者纯粹出于兴趣的原因要学习 Linux，有一个很好的系列教程以及一本书可以做为入门首选： 鸟哥的 Linux 私房菜 The Linux Command Line就像 Linux 是自由开源的一样，这些优秀的教程和书籍也是免费的。不喜欢看繁体字和英文的同学，可以看网友整理好的简体中文版： 鸟哥的Linux私房菜：基础学习篇 第四版 快乐的 Linux 命令行至于 Linux 环境，最方便的是用虚拟机安装自己中意的发行版，搭建方便，即便学习过程中搞坏了也不用担心。" }, { "title": "树莓派编程语言环境搭建", "url": "/posts/raspberry_pi_code_env/", "categories": "树莓派", "tags": "", "date": "2022-05-27 00:00:00 +0800", "snippet": "作为微型单板计算机，树莓派可以做很多事情，我们也可以用它来学习很多东西： 编程语言学习 Linux 系统学习 Linux 软件学习 各种服务搭建 硬件学习如果你已经有了一台计算机（台式机或者笔记本），那上边列出的内容，除了硬件学习需要一台类似树莓派的单板机外，其余的并不需要树莓派，完全可以在自己的计算机上安装虚拟机来搭建出一全新的系统，虚拟机内的系统跟本机环境隔离，不用担心自己原本的系统被搞乱。免费的虚拟机软件有：VirtualBox、VMware Fusion Player，VirtualBox 是使用 GPL 许可的开源软件，完全免费；VMware 只要注册就提供免费个人使用许可。当然，如果你是用来培养小朋友的计算机兴趣，但又不希望小家伙弄乱你的电脑，可以考虑用树莓派这类的单板机，但是随着全球芯片供应的短缺（2020 年开始，2022 年依旧），树莓派价格水涨船高，溢价太多不推荐入手。编程语言提到编程语言，大家最先想到的可能是近些年人工智能领域大热的 Python、互联网行业经久不衰的 Java、系统层/嵌入式开发的 C 语言或者各大语言排行榜：TIOBE。程序员有时喜欢讨论和对比不同的编程语言，但在人类社会第一台通用计算机 ENIAC 问世时，并没有编程语言供人们使用，那时的“程序员”还是体力劳动者，需要根据不同的计算场景给计算机接线（类似电影《模仿游戏》中图灵破解德国 Enigma 机的接线），后来人们改进了输入方式，把接线改成了由打孔的纸带输入，接线和纸带都可以理解为计算机直接运行的机器语言（0 和 1），再后来人们发明了汇编语言，用助记符代替机器语言中的操作码，用地址符号或标号代替指令或操作数地址，这样人们不再需要用 0/1 和计算机直接沟通了。到了 20 世纪 70 年代，C 语言的诞生为操作系统及其应用程序的开发奠定了基础，人们能够使用更偏向人类的语言进行编程，程序员这个工种也慢慢的从体力劳动者转向了脑力劳动者。来到 20 世纪 90 年代，更多更人类化的语言被创造出来，譬如 Python、Ruby、Java、JavaScript 等等，大大降低了编程难度，不过很遗憾的是中国迄今也没有国产的编程语言，得益于软件领域自由和开源的风潮，这并不是一个大问题，但它多少能从侧面反映国内软件行业的问题，太多的同学投入到了消费、娱乐等领域的开发导致内卷，而基础的操作系统领域却缺乏人才。编程语言按照其是否需要被编译，可以分为三类： 编译型 程序在编写完成后执行前，需要经过编译等步骤生成机器可以直接执行的程序的语言被称为编译型语言，典型的编译型语言有：C、Go，其从代码到执行的过程如下： 代码 —-&gt; 编译器/链接器等工具链 —-&gt; 可执行程序 —-&gt; 机器执行 解释型 程序在编写完成后可以由解释器直接执行的语言被称为解释型语言，典型的有：Python、Ruby，其从代码到执行的过程如下： 代码 —-&gt; 解释器 —-&gt; 机器码 —-&gt; 机器执行 半编译型（或者半解释型） 程序在编写完成后执行前，需要先经过编译等步骤生成中间产物（譬如字节码），再由解释器执行（譬如 JVM）的语言被称为半编译型语言，典型的有：Java、Groovy，其从代码到执行的过程如下： 代码 —-&gt; 编译器 —-&gt; 字节码 —-&gt; 解释器 —-&gt; 机器码 —-&gt; 机器执行 通常来说，编译型语言的执行效率高于解释型，因为编译型语言的可执行程序已提前编译好，机器直接读到内存里就可以运行，而解释型语言的解释器则是通过“同声传译”的方式将代码转译给机器的；相对的，解释型语言的跨平台特性要好于编译型，相同的代码只需要在不同的平台（Linux、macOS、Window）安装对应的解释器就能执行，而编译型语言需要编译不同的平台版本才能实现跨平台，甚至有时还需要微调代码才能兼容各平台。开发环境以 Go、Python、Java 这三个具有代表性的编程语言说明下如何搭建开发环境，都是两步：安装语言本身 + 安装 IDE 或者编辑器。macOS 和 Windows 不用赘述，无论编程语言还是 IDE，到官网下载安装包再一路按安装指导点鼠标就行了（macOS 使用 Homebrew 安装会更方便）。官网及 IDE：Go – GoLand 目前没有免费版，但学生、教师、开源项目的开发人员可以免费使用。Python – PyCharm 社区版免费Java –IntelliJ IDEA 社区版免费此外，还有微软出品的通用编辑器 Visual Studio Code 对很多编程语言都适用，有非常多的插件。下边用安装 Manjaro 系统的树莓派 4B 示例 Linux 上如何搭建开发环境，不同的发行版除了包管理器不同，其它路数都一样。1. Go安装语言$ sudo pacman -S go# 检查是否安装成功$ go versiongo version go1.18.1 linux/arm64更新源$ go env -w GO111MODULE=on# 七牛$ go env -w GOPROXY=https://goproxy.cn,direct编辑器：树莓派上安装不了专用的 IDE，只能选择 Visual Studio Code 或者 Vim 这类通用编辑器。# Visual Studio Code$ sudo pacman -S code# Vim$ sudo pacman -S vim编辑器插件：主要有语法高亮、错误检查、自动提示等，帮助开发人员快速书写代码。Visual Studio Code：goVim 要先安装插件管理器，再安装插件，需要能访问 Github。# 安装插件管理器 Vundle，也可以选择其它的$ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim# 新建 ~/.vimrc 文件，添加以下插件配置内容filetype offset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()Plugin 'fatih/vim-go'call vundle#end()filetype plugin indent on# 安装插件$ vim +PluginInstall +qall2. Python安装语言# 安装 python$ sudo pacman -S python# 安装库管理器$ sudo pacman -S python-pip# 检查是否安装成功$ python --versionPython 3.10.4$ pip --versionpip 21.0 from /usr/lib/python3.10/site-packages/pip (python 3.10)更新源$ pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simpleWriting to /home/panda/.config/pip/pip.conf编辑器：Visual Studio Code 或者 Vim，具体安装参见 Go 部分的说明。编辑器插件：Visual Studio Code –python；Vim – Plugin 'davidhalter/jedi-vim'，具体安装参见 Go 部分的说明。3. Java安装 JDK# jdk17 是 LTS （Long Term Supported，长期支持版本）$ sudo pacman -S jdk17-openjdk# 检查是否安装成功$ java --versionopenjdk 17.0.3 2022-04-19OpenJDK Runtime Environment (build 17.0.3+7)OpenJDK 64-Bit Server VM (build 17.0.3+7, mixed mode)更新源：jdk 或者 jre 没有源的概念，不需要更新，但如果开发用到了 maven/gradle（一般都会用到），还是需要更新它们的源。编辑器：Visual Studio Code 或者 Vim（不推荐），具体安装参见 Go 部分的说明。编辑器插件：Visual Studio Code – java，具体安装参见 Go 部分的说明。Hello World环境搭建好之后的第一步就是跑个 Hello World 了，下边三种语言分别各出一个命令行版（cmd）和一个网页版（web）。1. Go# 创建文件夹$ mkdir go &amp;&amp; cd go命令行版新建 hello.go 文件，输入以下内容。package mainimport \"fmt\"func main() { fmt.Println(\"Hello, World!\")}# 直接运行$ go run hello.goHello, World!# 或者编译后运行$ go build hello.go &amp;&amp; ./helloHello, World!网页版新建 hello_server.go 文件，输入以下内容。package mainimport ( \"fmt\" \"net/http\")func main() { http.HandleFunc(\"/\", HelloServer) http.ListenAndServe(\":8080\", nil)}func HelloServer(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, \"Hello, %s!\", r.URL.Path[1:])}# 直接运行，再在浏览器中访问：http://127.0.0.1:8080/World$ go run hello_server.go# 或者编译后运行，再在浏览器中访问：http://127.0.0.1:8080/World$ go build hello_server.go &amp;&amp; ./hello_server2. Pyhon# 创建文件夹$ mkdir python &amp;&amp; cd python命令行版新建 hello.py 文件，输入以下内容。print(\"Hello, World!\")# 运行$ python hello.pyHello, World!网页版新建 hello_server.py 文件，输入以下内容。import http.serverimport socketserverfrom http import HTTPStatusclass Handler(http.server.SimpleHTTPRequestHandler): def do_GET(self): self.send_response(HTTPStatus.OK) self.end_headers() self.wfile.write(b'Hello, World!')httpd = socketserver.TCPServer(('', 8080), Handler)httpd.serve_forever()# 运行，在浏览器中访问：http://127.0.0.1:8080$ python hello_server.py3. Java# 创建文件夹$ mkdir java &amp;&amp; cd java命令行版新建 HelloWorld.py 文件，输入以下内容。class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, World!\"); }}# 编译字节码$ javac HelloWorld.java# 运行$ java HelloWorldHello, World!网页版纯手写有一点麻烦，用在线的 Spring Initializr 生成一个，Dependencies 添加 Spring Web 依赖后点击 Genrate 下载，下载文件为 demo.zip。# 拷贝 demo.zip 到 java 目录$ cp ~/Downloads/demo.zip ./# 解压$ unzip demo.zip &amp;&amp; cd demo更改文件夹中 src/main/java/com/example/demo/DemoApplication.java 为如下内容：package com.example.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@SpringBootApplication@RestControllerpublic class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } @GetMapping(\"/\") public String hello(@RequestParam(value = \"name\", defaultValue = \"World\") String name) { return String.format(\"Hello, %s!\", name); }}运行也有点麻烦，需要提前安装 Maven 并更换为国内源：# 安装 maven$ sudo pacman -S maven# 拷贝配置文件到用户目录$ cp /opt/maven/conf/settings.xml ~/.m2/在 ~/.m2/settings.xml 文件 mirrors 部分添加以下内容：&lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;&lt;/mirror&gt;最后执行命令 mvn spring-boot:run 启动，第一次启动时 maven 会下载很多依赖，因此比较慢。启动日志如下，在浏览器中访问：http://127.0.0.1:8080 就可以收到 Hello, World! 了。 . ____ _ __ _ _ /\\\\ / ___'_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) ' |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.6.7)2022-05-19 20:56:50.286 INFO 51175 --- [ main] com.example.demo.DemoApplication : xxx2022-05-19 20:56:50.295 INFO 51175 --- [ main] com.example.demo.DemoApplication : xxx2022-05-19 20:56:52.859 INFO 51175 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : xxx...2022-05-19 20:56:54.069 INFO 51175 --- [ main] com.example.demo.DemoApplication : Started DemoApplicationBrainFuck最后介绍一个很有意思的编程语言 BrainFuck。BrainFuck 是一种极小化的计算机语言，由 Urban Müller 在 1993 年创建。该语言仅由八个简单命令和一个指令指针组成，但是它是图灵完备的。这篇回答：什么是图灵完备，简单解释了图灵机、图灵完备的概念。概括点说的话，图灵完备的语言对计算机来说是等价的，也就是说从计算机的角度看 BrainFuck 能完成跟其它图灵完备编程语言（Go、Python、Java）一样的事情。先看看它仅有的语法：+ : 递增当前指针指向单元格的值- : 递减当前指针指向单元格的值&gt; : 右移指针&lt; : 左移指针. : 输出当前指针所指向的单元格值(ASCII), : 输入一个值存储在当前指针所指向的单元格[ : 如果当前指针所指向的单元格值为 0，则跳转到与之对应的 ]] : 如果当前指针所指向的单元格值不为 0，则跳转到与之对应的 [再看看它的 Hello World 代码，确实挺 “fuck” 的：++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.最后运行起来，在 macOS 下运行它：# 安装用 C 语言写的解释器$ brew install brainfuck# 把 Hello World 的代码写到一个文件中，譬如 hello.bf# 用解释器 brainfuck 运行$ brainfuck hello.bfHello World!最后的最后，如果你不是计算机行业从业人员，没有必要非常系统的学习一门编程语言，只需要了解如何快速搭建好环境，看一些快速入门的书籍就可以了，当需要用程序帮助你完成重复、计算、自动化等工作时，再充分利用好搜索引擎就行。编程语言终归只是工具，学会使用工具不是目的，利用工具服务好我们的科研、工程、教育，为祖国的复兴事业添砖加瓦、为人类社会的文明贡献力量亦或是探寻宇宙和生命的意义才是目的。" }, { "title": "SSH 简介", "url": "/posts/ssh/", "categories": "Linux", "tags": "", "date": "2022-05-08 00:00:00 +0800", "snippet": "通过树莓派学习 Linux 之前，非常有必要了解下 SSH。通过图形用户界面（GUI）登陆和使用 Linux，只是 Linux 系统的一部分使用场景（譬如科研、工程领域的各种专业软件都需要 GUI 的支持），但其它情况下更多的是通过无界面的命令行方式使用和管理 Linux。SSH 是 Linux 系统的命令行登录工具，广泛用于服务器登录和衍生的各种加密通信。阮一峰老师的 SSH 教程 浅显易懂，推荐花个把小时的时间阅读下。本篇文章是对教程的简记，抛除了个人不太常用的端口转发和证书登录以及各种配置项列表，期望看过后能够快速上手。SSH 架构SSH 全称 Secure Shell，中文安全外壳协议。历史上，网络主机之间的通信是不加密的，属于明文通信。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码。SSH 就是为了解决这个问题而诞生的，它是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。明文的网络协议可以套用在它里面，从而实现加密。SSH 的软件架构是服务器-客户端模式（Server - Client）。 向服务器发出请求的部分，称为客户端（client），OpenSSH 的实现为 ssh； 接收客户端发出的请求的部分，称为服务器（server），OpenSSH 的实现为 sshd。注意区别大写的 SSH 和小写的 ssh/sshd，ssh/sshd 是实现了 SSH 协议的软件。SSH 客户端Linux/macOS 一般自带 ssh，打开终端输入命令 ssh -V 查看版本信息。1. 基本用法# 使用user登陆host，host可以是域名或ip$ ssh user@host# 使用user登陆host，等同于ssh user@host$ ssh -l user host# 如果不提供用户名，则默认使用客户端的当前用户登陆host$ ssh host# 默认连接服务器的22端口，-p参数可以指定其他端口（譬如8022）$ ssh -p 8022 host2. 连接流程ssh 如果是第一次连接某台服务器（譬如 foo.com），ssh user@foo.com 命令执行后终端会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。The authenticity of host 'foo.com (192.168.121.111)' can't be established.ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.Are you sure you want to continue connecting (yes/no)?提示中的 fingerprint，是指 SSH 服务器公钥的哈希值（SHA256）。每台 SSH 服务器都有唯一一对密钥（公钥和私钥）用于跟客户端通信，其中公钥的哈希值是客户端用来识别服务器的。ssh 会将本机连接过的所有服务器公钥的指纹储存在本机的 ~/.ssh/known_hosts 文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。在上面的提示文字后面，输入 yes，就可以将当前服务器的指纹也储存在本机 ~/.ssh/known_hosts 文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。Warning: Permanently added 'foo.com (192.168.121.111)' (RSA) to the list of known hosts然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。3. 服务器密钥变更如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时客户端就会显示一段警告信息。@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host is77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.Please contact your system administrator.Add correct host key in /home/me/.ssh/known_hosts to get rid of this message.Offending key in /home/me/.ssh/known_hosts:36警告的意思是：主机的公钥指纹跟 ~/.ssh/known_hosts 文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从 ~/.ssh/known_hosts 文件删除；或者手动去文件里删除。$ ssh-keygen -R hostname4. 执行远程命令SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。有时只是想在远程服务器上执行一条命令就退出，还可以用一种简单的方式：ssh + command 的形式，将要执行要的命令直接写在 ssh 命令的后面。$ ssh username@hostname command# -t参数启动互动式的Shell环境，譬如vim$ ssh -t username@hostname command5. 配置文件SSH 客户端的全局配置文件是 /etc/ssh/ssh_config，用户个人的配置文件是 ~/.ssh/config，优先级高于全局配置文件。~/.ssh 目录下还有一些用户个人的密钥文件和其他文件。 ~/.ssh/id_ecdsa：ECDSA 私钥。 ~/.ssh/id_ecdsa.pub：ECDSA 公钥。 ~/.ssh/id_rsa：RSA 私钥。 ~/.ssh/id_rsa.pub：RSA 公钥。 ~/.ssh/known_hosts：包含 SSH 服务器的公钥指纹。用户个人的配置文件 ~/.ssh/config，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。Host * Port 2222Host remoteserver HostName remote.example.com User neo Port 2112上面配置中，Host * 表示对所有主机生效，后面的 Port 2222 表示配置所有主机的默认连接端口都是 2222，这样就不用在登录时特别指定端口了。后面的 Host remoteserver 表示该设置只对主机 remoteserver 生效。remoteserver 只是一个别名，具体的主机由 HostName 指定，User 和 Port 这两项分别表示用户名和端口。这里的 Port 会覆盖上面 Host * 部分的 Port 设置。以后，登录 remote.example.com 时，只要执行 ssh remoteserver 命令，就会自动套用 config 文件里面指定的参数。各种配置项及其解释详见：主要配置命令SSH 服务器服务器端运行的软件是 sshd，用来接收客户端的请求并响应。所谓服务器端是指我们要远程连接的那台机器。一般来说，当我们通过 ssh 连接外部、公司或者其他人的服务器时，并不需要我们自己配置 sshd，而且我们也没有配置的权限。但是，当我们搭建了自己的家庭服务器（譬如树莓派），就需要了解怎么启动 sshd。1. 基本用法通常 sshd 安装后会跟着系统一起启动，如果 sshd 没有启动，可以用命令 sshd 或 sshd &amp; 启动。除了直接运行可执行文件，也可以通过 Systemd 启动 sshd。# 启动$ sudo systemctl start sshd.service# 停止$ sudo systemctl stop sshd.service# 重启$ sudo systemctl restart sshd.service# 开机自动启动$ sudo systemctl enable sshd.service# 取消开机启动$ sudo systemctl disable sshd.service# 查看状态$ sudo systemctl status sshd.service2. 配置文件sshd 的配置文件在 /etc/ssh 目录，主配置文件是 sshd_config，此外还有一些安装时生成的密钥文件（ssh_host_xxx_key，xxx 表示不同的算法）。/etc/ssh├── moduli├── ssh_config├── sshd_config├── ssh_host_dsa_key├── ssh_host_dsa_key.pub├── ssh_host_ecdsa_key├── ssh_host_ecdsa_key.pub├── ssh_host_ed25519_key├── ssh_host_ed25519_key.pub├── ssh_host_rsa_key└── ssh_host_rsa_key.pub如果重装 sshd，上面这些密钥都会重新生成，导致客户端重新连接 ssh 服务器时，会跳出警告拒绝连接。想要避免这种情况，可以在重装 sshd 时，先备份 /etc/ssh 目录，重装后再恢复这个目录。默认的 sshd_config 文件比较长，但其中大部分是注释，可以用下边命令查看有效配置。$ cat /etc/ssh/sshd_config | grep -v '^#' | grep -v '^$' | sort修改配置文件以后，需要重启 sshd 使配置生效：sudo systemctl restart sshd.service各种配置项及其解释详见：sshd 配置项SSH 密钥登录SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。密钥登录是比密码登录更好的解决方案。1. 密钥密钥（key）是一个非常大的数字，通过加密算法得到。对称加密只需要一个密钥，非对称加密需要两个密钥成对使用，分为公钥（public key）和私钥（private key）。如果数据使用公钥加密，那么只有使用对应的私钥才能解密，其他密钥都不行；反过来，如果使用私钥加密（这个过程一般称为“签名”），也只有使用对应的公钥解密。SSH 密钥登录采用的是非对称加密，每个用户通过自己的密钥登录。其中，私钥必须私密保存，不能泄漏；公钥则是公开的，可以对外发送。密钥登录比密码登录更方便的原因就在公/私钥的使用，只要保护好自己的私钥并把公钥告诉服务器就可以登录，具体过程如下：a. 在客户端通过 ssh-keygen 生成自己的公钥和私钥。b. 将客户端的公钥存入远程服务器的指定位置。c. 客户端向服务器发起 SSH 登录的请求。d. 服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。e. 客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。f. 服务器收到客户端发来的加密签名后，使用对应的公钥解密并跟原始数据比较。如果一致，就允许用户登录。上述步骤中，a、b 对于每一台服务器，只需要执行一次即可；d、e、f 则由 ssh/sshd 完成；用户每次只需要完成 c 步骤，使用 ssh 命令执行登录。2. 生成密钥OpenSSH 提供的工具 ssh-keygen 可以用来生成密钥。直接输入 ssh-keygen，程序会询问一系列问题，然后生成密钥。但更通常做法是使用 -t 和 -C 参数，分别指定加密算法和该密钥的注释。$ ssh-keygen$ ssh-keygen -t ed25519$ ssh-keygen -t ed25519 -C \"your_email@domain.com\"$ ssh-keygen -t dsaGenerating public/private dsa key pair.Enter file in which to save the key (/home/username/.ssh/id_dsa): press ENTEREnter passphrase (empty for no passphrase): ********Enter same passphrase again: ********Your identification has been saved in /home/username/.ssh/id_dsa.Your public key has been saved in /home/username/.ssh/id_dsa.pub.The key fingerprint is:14:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19 username@shell.isp.com上面执行 ssh-keygen 命令以后，会出现第一个问题，询问密钥保存的文件名，默认是 ~/.ssh/id_dsa 文件，这个是私钥的文件名，对应的公钥文件 ~/.ssh/id_dsa.pub 是自动生成的。如果选择 rsa 算法，生成的密钥文件默认就会是 ~/.ssh/id_rsa（私钥）和 ~/.ssh/id_rsa.pub（公钥）。接着，第二个问题询问是否要为私钥文件设定密码保护（passphrase）。这样的话，即使入侵者拿到私钥，还是需要破解密码。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。最后，就会生成私钥和公钥，屏幕上会给出公钥的指纹，以及注释。公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样。ssh-rsa AAAAB3NzaC1yc2EAAAABIw... username@shell.isp.com3. 上传公钥OpenSSH 规定，用户公钥保存在服务器的 ~/.ssh/authorized_keys 文件。以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的 ~/.ssh/authorized_keys 文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。手动上传用户可以手动编辑该文件，把公钥粘贴进去，也可以执行下面的命令。$ cat ~/.ssh/id_rsa.pub | ssh user@host \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"自动上传OpenSSH 自带的 ssh-copy-id 命令，可以自动将公钥拷贝到远程服务器的 ~/.ssh/authorized_keys 文件。如果 ~/.ssh/authorized_keys 文件不存在，ssh-copy-id 命令会自动创建该文件。$ ssh-copy-id -i key_file user@host上面命令中，-i 参数用来指定公钥文件，user 是所要登录的账户名，host 是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。如果不指定公钥文件，ssh-copy-id 会使用满足 ~/.ssh/id*.pub 的最新文件。注意，公钥文件也可以不指定路径和 .pub 后缀名，ssh-copy-id 会自动在 ~/.ssh 目录里面寻找。$ ssh-copy-id -i id_rsa user@host上面命令中，公钥文件会自动匹配到 ~/.ssh/id_rsa.pub。4. ssh-agent、ssh-add私钥如果设置了密码，每次使用都必须输入密码，有时让人感觉非常麻烦。ssh-agent 命令就是为了解决这个问题而设计的，它让用户在整个 Shell 对话（session）之中，只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了。第一步，使用下面的命令新建一个命令行对话。$ ssh-agent bash上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如 zsh 和 fish。如果想在当前对话启用 ssh-agent，可以使用下面的命令，eval 命令作用是运行 ssh-agent 命令的输出。$ eval `ssh-agent`# 或$ eval $(ssh-agent)第二步，在新建的 Shell 对话里面，使用 ssh-add 命令添加私钥。# 添加默认私钥文件$ ssh-add# 或显式指定私钥文件$ ssh-add my-other-key-file上面命令添加私钥时，会要求输入密码。但以后，在这个对话里面再使用私钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。第三步，使用 ssh 命令正常登录远程服务器。$ ssh remoteHost上面命令中，remoteHost 是远程服务器的地址，ssh 使用的是默认的私钥。这时如果私钥有密码，ssh 将不再询问密码，而是直接取出内存里面的私钥。ssh-add 命令的参数如下。# 从内存中删除指定的私钥$ ssh-add -d name-of-key-file# 从内存中删除所有已经添加的私钥$ ssh-add -D# 列出所有已经添加的私钥$ ssh-add -l相关命令介绍两个 ssh 相关的命令：scp、sftp。1. scpscp 是 secure copy 的缩写，相当于 cp 命令 + SSH。它的底层是 SSH 协议，默认端口是 22，相当于先使用 ssh 命令登录远程主机，然后再执行拷贝操作。scp 主要用于以下三种复制操作： 本地复制到远程。 远程复制到本地。 两个远程系统之间的复制。用法示例本地到远程# 语法$ scp SourceFile user@host:directory/TargetFile# 将本机文件拷贝到远程目录下$ scp file.txt remote_username@10.10.0.2:/remote/directory# 将本机某个目录拷贝到远程目录下$ scp -r localmachine/path_to_the_directory username@server_ip:/path_to_remote_directory/# 将本机某个目录下的所有内容拷贝到远程目录下$ scp -r localmachine/path_to_the_directory/* username@server_ip:/path_to_remote_directory/远程到本地# 语法$ scp user@host:directory/SourceFile TargetFile# 拷贝一个远程文件到本机目录下$ scp remote_username@10.10.0.2:/remote/file.txt /local/directory# 拷贝一个远程目录到本机目录下$ scp -r username@server_ip:/path_to_remote_directory local-machine/path_to_the_directory/# 拷贝一个远程目录下的所有内容到本机目录下$ scp -r username@server_ip:/path_to_remote_directory/* local-machine/path_to_the_directory/远程到远程# 语法$ scp user@host1:directory/SourceFile user@host2:directory/SourceFile# 示例$ scp user1@host1.com:/files/file.txt user2@host2.com:/files注意：冒号（:）分隔符之前是用户名@服务器；之后是路径，路径可以用绝对路径或相对路径，用相对路径的起点是用户的 home 目录 ~。2. sftpsftp 是 SSH 提供的一个客户端应用程序，主要用来安全地访问 FTP。因为 FTP 是不加密协议，很不安全，sftp 相当于将 FTP 放入了 SSH。ftp 和 sftp 区别简单的描述： ftp 是一个文件传输服务，设计它的目的就是为了传输文件，它有独立的守护进程，使用 20、21 两个端口，20 是数据链路的端口，21 是控制链路的端。 sftp 也是用来传输文件的，但它的传输是加密的，是 ssh 服务的一部分，没有单独的守护进程，和 ssh 一样，使用 22 端口。下面的命令连接 FTP 主机，连接成功以后，就会出现 FTP 的提示符 sftp&gt;。$ sftp username@hostnameConnected to penguin.example.com.sftp&gt;提示符下面，就可以输入各种 FTP 命令了，这部分完全跟传统的 FTP 用法完全一样。 ls [directory]：列出一个远程目录的内容。如果没有指定目标目录，则默认列出当前目录。 cd directory：从当前目录改到指定目录。 mkdir directory：创建一个远程目录。 rmdir path：删除一个远程目录。 put localfile [remotefile]：本地文件传输到远程主机。 get remotefile [localfile]：远程文件传输到本地。 help：显示帮助信息。 bye：退出 sftp。 quit：退出 sftp。 exit：退出 sftp。本文采用知识共享 署名-相同方式共享 3.0协议。" }, { "title": "树莓派第三方操作系统", "url": "/posts/raspberry_pi_3_party_os/", "categories": "树莓派", "tags": "", "date": "2022-05-04 00:00:00 +0800", "snippet": "树莓派除了官方 Raspberry Pi OS，还可以安装各种各样第三方操作系统（不同的 Linux Distro，DistroWatch 上可以查看各发行版的单日点击率），可选的 OS 详见 Awesome Raspberry Pi OS Images，这些第三方操作系统可以分为两大类：通用型和专用型，通用型是像 Windows/macOS 一样供用户日常使用的系统，专用型则有点像现代电视机里的系统（没错，现代电视机里是有操作系统的，大部分应该都是基于 Android 魔改的），它基于 Linux 但是裁剪了很多功能，只专注于某项特定的功能，譬如视频播放。通用第三方操作系统Arch Linux ARM、CentOS、Fedora、FreeBSD、Gentoo 等等，都是通用的第三方操作系统，其功能各有千秋，这里只介绍两款：Ubuntu 和 Manjaro。1. Ubuntu桌面版下载地址：Ubuntu Desktop，安装方法不用再赘述了。 What’s new for Raspberry Pi with Ubuntu 22.04 LTS? … Ubuntu 22.04 LTS is the first time Ubuntu Desktop has also been certified for the Raspberry Pi 4. … Ubuntu Desktop is faster than ever on the Pi thanks to numerous optimisations to the GNOME Desktop environment (which is now running GNOME 42), delivering up to twice the frame rate when navigating your desktop compared to Ubuntu 21.10. …Ubuntu 22.04 LTS (Long Term Support) (codename: Jammy Jellyfish) 是树莓派的第一个长期支持版本，官方声称其桌面环境帧率是 21.10 版本的两倍，并且鉴于 Ubuntu 近些年来非常高的社区活跃度及用户使用率，很有必要尝试下树莓派上的 Ubuntu。有一点需要注意，GNOME 相对树莓派来说还是比较重的，启动就吃了 1GB 往上的内存，因此低于 2GB 内存的树莓派请不要尝试了。下边是登陆后和打开文件系统、LibreOffice的截图，色彩和使用体验都很不错。2. ManjaroLinux 发行版的发行方式有标准发行和滚动发行的区分，很多常见的发行版都是标准发行，其在发行时会向大众说明当前发行的版本是多少，如果用户想要安装新版本来代替之前的旧版本，通常需要重新安装（当然也有的有在线升级的功能），相对应的滚动发行版就不存在重新安装的问题，用户可以方便的进行小而频繁的更新（通常只需要一条简单的更新命令），永远拥有最新版本的发行版，但随之而来的是系统有滚挂的风险，Arch Linux 是典型的滚动式发行。滚动发行让系统时常处在最新状态，这种模式吸引了大批用户，但是 Arch Linux 的高上手门槛又让很多人望而却步，这时 Manjaro 站了出来。Manjaro Linux（简称 Manjaro）是基于 Arch Linux 的 Linux 发行版，也采用滚动更新的方式，它的目标是让强大的 Arch Linux 更方便用户使用，同时也更加稳定（相对新手来说不容易滚挂）。Manjaro 在树莓派上有几种不同的桌面环境：Gnome、KED Plasma、MATE、XFCE、Sway、其中：Gnome 和 KED Plasma 是比较重的桌面环境，启动后会占用较多的系统资源，使用时界面比较炫；MATE 和 XFCE 是轻量的桌面环境，占用系统资源少，使用时界面很丝滑；Sway 是轻量的平铺式桌面（Tiling Window），所谓平铺是指桌面上的窗口都是平铺的不会产生堆叠（浮窗除外），每新开一个窗口桌面就会被重新分割一次以让每个窗口都占有一定比例。下图是示例，左上、右上和下边是三个不同窗口，没有堆叠。Manjaro Sway 的下载地址：Raspberry Pi 4 Sway，对于只使用过一种操作系统的同学，Sway 是非常新颖的桌面管理方式，他山之石，值得一试。Mac 下也有类似的平铺式桌面工具：yabai，感兴趣的同学也可以试试。Sway 不单占用资源少可以高效的管理桌面空间，它还有另一个大杀器：keyboard controlled workflow（直译：键盘控制工作流？），用白话解释：用户可以使用键盘控制窗口（应用）的打开、关闭、移动，做到几乎不用鼠标。下边视频里的用户做了探索性的展示： 我也做了个 gif：左边 The Matrix 所谓选择，都是虚幻；右上牛说唐诗宋词；右下监控系统状态。一顿操作猛如虎，定睛一看原地杵，虽然没什么生产力，但是又酷又秀，骚包到没朋友。树莓派安装好 Manjaro Sway，启动后的桌面是一个黑色调的壁纸带一个顶部状态栏，不熟悉的用户一开始是找不到文件管理器或者我的电脑这些东西的，而且 Sway 也没有这些东西。可以点击的地方是右上角一个 ? 的标识，会弹出 Readme 文件，简短的说明应该怎么用键盘操作 Sway，部分内容如下。基础默认的修饰键 ($mod) 一般是 (Windows / Pi / Pine) 键。有两种模式的移动键： VIM 模式: h / j / k / l 方向键模式: left / down / up / rightSway 有多达十个不同的工作区，可以在可用的显示器上自由排列。打开/关闭应用 打开新的终端: $mod + Enter 打开应用程序启动器: $mod + Space 终止应用程序: $mod + Shift + q使用工作区 切换工作区: $mod + 0-9 (工作区编号) 移动应用程序到另一个工作区 : $mod + Shift + 0-9 (工作区编号)更改窗口 为当前应用程序窗口切换全屏: $mod + f 垂直拆分当前应用程序窗口: $mod + v 水平拆分当前应用程序窗口: $mod + b浮窗 为当前应用程序窗口切换浮动模式: $alt + Shift + Space 在浮动应用程序窗口和平铺应用程序窗口之间切换: $alt + Space 移动浮动应用程序窗口: $mod + Shift + &lt;movement-key&gt; (见基础)截屏 进入截屏: $mod + Shift + s 复制整个屏幕的截图: f 保存整个屏幕的截图: Shift + f 复制应用程序窗口的截图: w 保存应用程序窗口的截图: Shift + w 复制屏幕特定区域的截图: r 保存屏幕特定区域的截图: Shift + r 退出调整大小模式: Enter or ESC录屏 进入录屏: $mod + Shift + r 录制整个屏幕: f 录制整个屏幕及录音: Shift + f 录制屏幕的某个区域: r 录制屏幕的某个区域及录音: Shift + r 退出调整大小模式: Enter or ESC重启/退出 重载 Sway 配置: $mod + Shift + c 退出 Sway 会话: $mod + Shift + e专用第三方操作系统专用的第三方操作系统有很多有趣的东西可以玩，像影视、音乐、游戏甚至路由器，下面对这四类系统做简介。1. 影视 - LibreELECLibreELEC – Just enough OS for KODILibreELEC 的系统镜像非常小，只有 100 多 MB，一如其 slogan 它是专为 Kodi 打造的轻量级 “Just enough OS” Linux 发行版。Kodi 则是由 XBMC 基金会开发的开源媒体播放器，可以让用户播放本地或网络存储设备中的大多数视频、音乐、播客及各种常见数位媒体文件。简单来说，LibreELEC = 裁剪版 Linux 系统 + Kodi 软件，安装到树莓派上可以当做媒体中心使用，具体安装步骤如下。a. 启动时，语言选择 English，没有中文可选。b. 设定 Hostname，没有特别要求保持默认即可。c. 连接网络。d. 打开 SSH，Samba 默认已打开。e. 初始化完成进入主界面。f. 设定中文，Interface 中 Skin -&gt; Fonts 选择 Arial based，再去 Regional -&gt; Language 选择中文。g. 完成设定，系统信息。看剧时，通过连接 NAS (Network Attached Storage 网络附接存储)、外接硬盘、Samba 存入等方式载入剧集。2. 音乐 - VolumioVolumio – STREAM ALL YOUR MUSIC IN THE BEST QUALITYVolumio 本质上也是一个定制的 Linux 系统，默认没有图形界面（可以配置），播放和控制主要通过 WEB 界面实现，当前支持树莓派、PC (X86/X64) 和华硕的 Tinker Board。Volumio 除了界面精美，它还有几项高级功能，用在树莓派上是小成本玩 Hi-Fi 的典范。 支持内置存储、外接硬盘、NAS 存储播放 支持 DLNA 以及 AirPlay 无线音乐传输 支持外接 DACVolumio 安装非常简单，烧好镜像启动即可，启动前不需要额外的配置，全部都可以在启动后配置，包括 Wi-Fi。Volumio 第一次启动时，会开启一个以 Volumio 开头的热点，用手机或电脑连上热点，然后浏览器访问 http://volumio.local 开始初始化配置。a. 选择语言b. 播放器名称，如果更改，后续访问是要使用新的地址：http://名称.localc. 输出设备：选择 DAC 或者 Headphones，其中 DAC 也有官方合作的产品，IQaudio DAC+、IQaudio DAC Pro、IQaudio DigiAMP+d. 连接 Wi-Fi，Wi-Fi 连接好之后，下次 Volumio 启动会自动关闭热点。e. 最后初始化完成。初始化完成后，用浏览器访问：http://名称.local，默认：http://volumio.local，UI 非常漂亮，给我一种北欧神化的感觉。主界面手机端主界面播放界面添加音乐界面，添加音乐文件（连接 NAS、插入硬盘或者拷入）后点击重新扫描进行更新（注意：内置存储的音乐要放在 /mnt/INTERNAL，否则扫描不出来）手机 Airplay3. 游戏 - Lakka、RetroPieLakka – The open source game consoleLakka 是基于 LibreELEC 和 RetroArch 的轻量 Linux 系统，支持的模拟器列表：Hardware support，其界面像 PSP，可以流畅的模拟 GBA、FC（NES）游戏，也支持街机（Arcade）、PSP等模拟器。Lakka 安装和使用比较简单，按照官方指导：烧录 -&gt; 启动 -&gt; Samba 拷入 rom -&gt; 开始游戏。RetroPie – 基于 Raspberry Pi OS 的复古游戏机，可以在现有 Raspberry Pi OS 上安装，也可以直接用官方镜像安装。由于其系统仍然是 Raspberry Pi OS，所以情怀上来时，可以当游戏机玩，情怀退却之后还可以当微型 Server 用，最大化的利用树莓派。官方有段视频演示如何一步步安装。 4. 路由器 - OpenWrtOpenWrt 是适合嵌入式设备的 Linux 发行版，默认使用 LuCI 作为 WEB 交互界面，其支持的设备列表：Table of Hardware 非常多。刷 OpenWrt 的路由器相对原厂系统路由器，最大优势是能够安装非常多的插件，而刷了 OpenWrt 的树莓派则可以当做一款 CPU 和内存都比较强的路由器，不仅可以安装海量插件，在 docker 的帮助下可以开辟更多玩法。常见的插件有：广告屏蔽大师 Plus +、上网时间控制、网络唤醒等等。推荐使用 OpenWrt-Rpi 安装，它是利用 Github Action 的编译工程，每天编译一次，编译好的固件中预置了丰富插件，下载、安装参考文档：https://doc.openwrt.cc，内置功能如下：最后提点 OpenWrt 的历史，从这个故事可以看出商业上使用正确开源许可的重要性。 Cisco/Linksys 在 2003 年发布了 WRT54G 这款无线路由器，有人发现它是基于 Linux 开发的，而 Linux 是基于 GPL 许可证发布的，按照该许可证 Cisco 应该把 WRT54G 的源代码公开。 2003 年 3 月， Cisco 迫于公众压力公开了 WRT54G 的源代码，此后在很多独立开发者的努力下，就出现了一系列基于 Cisco 源码的第三方路由器固件，OpenWrt 就是其中之一。独立开发者们将该系统移植到各种不同厂家的芯片组和设备类型上，更新内核模块添加软件包，使今日的 OpenWrt 日趋完善和强大。" }, { "title": "树莓派官方操作系统", "url": "/posts/raspberry_pi_os/", "categories": "树莓派", "tags": "", "date": "2022-04-30 00:00:00 +0800", "snippet": "Raspberry Pi OS（原为Raspbian）是基于 Debian 开发的操作系统。从 2015 年起，树莓派基金会正式将其作为树莓派的官方操作系统。安装Raspberry Pi OS 可以从官方网站或者清华镜像站下载。常规的安装方式是使用 Raspberry Pi Imager、Etcher 或者 dd 命令行工具烧录到 SD 卡中，再接上鼠标、键盘、显示器，接通电源后看着屏幕进行初始化配置。但有时手头除了一个笔记本电脑并没有额外的外设，那就需要用另一种方式进行安装：无界面安装 (Setting up a Headless Raspberry Pi)。具体步骤如下：1. 烧录 SD 卡依然使用 Imager、Etcher、dd 等工具把系统烧录到 SD 卡，完成后先不要推出，还需要写入配置文件。2. 添加配置文件在 SD 卡的 boot 分区创建两个文件：ssh、userconf.txt。 ssh 文件是用来开启树莓派的 sshd 功能，开启后可以直接在笔记本电脑上通过 ssh 的方式访问树莓派。ssh 文件创建出来后不用任何其它操作，留空即可。 userconf.txt 文件是用来创建用户的，新的树莓派官方系统已不再保留默认的 pi 用户，因此需要用户自己创建。userconf.txt 的内容很简单，一行 username:password 形式的文本即可，其中：username 是明文用户名；password 是使用命令 echo 'yourpassword' | openssl passwd -6 -stdin 生成的密文。如果没有相应的工具也可以使用我用 pi 生成的密文： $6$b/XnJjYlAWe1OOME$OckGiin62vnCYnaZWn5zeXTQpFZWrCPUi4BWom2P8HKqy3nAwcAjWNEq3kgjwYa3JlWfTIapYTo1xJ69MGkvS1。 $ echo 'pi' | openssl passwd -6 -stdin$6$b/XnJjYlAWe1OOME$OckGiin62vnCYnaZWn5zeXTQpFZWrCPUi4BWom2P8HKqy3nAwcAjWNEq3kgjwYa3JlWfTIapYTo1xJ69MGkvS1 最终 userconf.txt 的内容如下，相应的登陆时的用户名/密码就是：panda/pi。 panda:$6$b/XnJjYlAWe1OOME$OckGiin62vnCYnaZWn5zeXTQpFZWrCPUi4BWom2P8HKqy3nAwcAjWNEq3kgjwYa3JlWfTIapYTo1xJ69MGkvS1 如果不想使用网线而是通过 Wi-Fi 给树莓派提供网络，还需要在 boot 分区创建另外一个文件 wpa_supplicant.conf 以提供 Wi-Fi 的 ssid 和密码。内容如下：ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevcountry=CNupdate_config=1network={ ssid=\"Wi-Fi 名\" psk=\"Wi-Fi 密码\"}3. 启动推出 SD 卡然后插到树莓派卡槽里，接上网线和电源线，上电启动。4. 远程连接虽然树莓派就在你手里，但是因为没有显示器没法直接使用，只能通过 ssh 的方式连接使用，因此这步叫远程连接。Windows 使用 PuTTY 工具连接，Mac/Linux 直接在 Terminal 里输入命令：ssh panda@raspberrypi.local 连接，其中的 panda 请改成自己在userconf.txt 文件设定的用户名。$ ssh panda@raspberrypi.localThe authenticity of host 'raspberrypi.local' ...Are you sure you want to continue connecting (yes/no/[fingerprint])?输入 yes 后回车再输入密码，就进入到了树莓派系统。简单解释下 ssh，在以后的文章中再详细说明： Secure Shell（安全外壳协议，简称 SSH）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH 通过在网络中建立安全隧道来实现 SSH 客户端与服务器之间的连接。SSH 最常见的用途是远程登录系统，人们通常利用 SSH 来传输命令行界面和远程执行命令。5. 开启 VNCVNC 能够让笔记本访问树莓派的桌面，Raspberry Pi OS 已安装了 VNC Server 但默认关闭，需要手动打开。 VNC（Virtual Network Computing），为一种使用 RFB 协议的屏幕画面分享及远程操作软件。 此软件借由网络，可发送键盘与鼠标的动作及即时的屏幕画面。在命令行中输入 sudo raspi-config 打开配置，选择：Interface Options –&gt; VNC –&gt; Yes，开启 VNC。选择：Display Options –&gt; VNC Resolution –&gt; 选定分辨率 –&gt; Select，对 VNC 的分辩率进行调整。选择：Finish –&gt; Yes，保存设定并重启。6. VNC Viewer树莓派上 VNC Server 配置好等待重启期间，笔记本电脑上需要安装 VNC Viewer，直接下载安装即可。（VNC Viewer 手机端也可以安装，感兴趣的同学可以试试。）打开 VNC Viewer，输入地址 raspberrypi.local ，再输入用户名/密码（panda/pi）连接。连接成功的界面如下：以上 6 步就完成了树莓派的无界面安装和 VNC 访问，方便手里只有一台笔记本电脑的同学操作。使用树莓派日常使用的场景：网页浏览、文档编辑、影音播放等，下边一一介绍。1. 系统更新换源和系统更新的方法不用过多说明，参考清华镜像站 Raspbian 镜像使用帮助和以下命令。# 更新软件包列表$ sudo apt update# 更新所有软件及其依赖$ sudo apt full-upgrade# 安装软件$ sudo apt install xxx# 卸载软件$ sudo apt remove xxx# 卸载软件及其配置文件$ sudo apt purge xxx系统更新可以提高系统的安全性，手动更新的频率请参照神秀禅师的偈子：时时勤拂拭，勿使惹尘埃。2. 中文输入法# 安装$ sudo apt install fcitx5 fcitx5-chinese-addonsPreferences –&gt; Fcitx5 Configuration –&gt; 取消 Only Show Current Language –&gt; 添加 Pinyin，添加好之后，可以通过快捷键 Crtl + 空格切换。如果想让系统界面也改成中文，在 Preferences –&gt; Raspberry Pi Configuration –&gt; Localisaition –&gt; Locale 中进行设定，重启后生效。3. 浏览器系统默认安装了 Chromium 浏览器，外接显示器的情况下使用没有什么问题，但是通过 VNC 的方式使用时会非常卡顿，几乎无法使用。这篇贴子给出了可能的原因和解决方法：Slow VNC response in certain applications。原因： Extensive research indicated problem may be due to VNC system with headless Bullseye &amp;/or chromium hardware acceleration.解决： 方法1 插入 HDMI 接口或假的 HDMI 接口。这种方法不推荐，本来就是因为没有或者不想用额外的外设才 VNC 的。 Monitor use not a long term option for those of us who like or need to run RPi’s headless, so I used an HDMI dummy plug of the type typically used by cryptocurrency miners to fool an OS that a GPU is actually connected to a monitor when in fact it is not. 方法2 改 /boot/config.txt： # 把 hdmi_force_hotplug 的注释取消hdmi_force_hotplug=1 # 把下边两行注释掉#dtoverlay=vc4-kms-v3d#max_framebuffers=2 再按说明选择 hdmi_group 和 hdmi_mode。 # DMThdmi_group=2# 1920x1080 60Hzhdmi_mode=82 方法3 sudo apt install firefox-esr 索性换个浏览器吧。 外接显示器时，网页端看视频 720P 无压力，1080P 有丢帧不影响观看，VNC 下看视频都很卡顿。4. 文档和影音办公软件默认安装了 LibreOffice，它是由文档基金会开发的自由及开放源代码的办公室套件，支持读写 Microsoft Office 格式（.docx、.pptx、.xlsx 、.doc、.ppt、.xls），对不想购买 Office License 的轻度用户非常友好。播放器默认安装了 VLC media player，它是一款免费、自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及各类流媒体协议。5. 摄像头树莓派支持两种类型的摄像头：CSI 接口的专用摄像头、USB 接口的网络摄像头。 官方 CSI 摄像头有常规、红外、高清三种，价格 ¥200 往上；淘宝上也有非官方的同类产品，价格亲民 ¥20 上下。 USB 摄像头是我们日常用的外接摄像头，像罗技的这些产品：网络摄像头。 官方 CSI 摄像头比同等价位的 USB 摄像头的性能高不少，同时它的可配置性也高很多，相关软件有 libcamera 和 Raspicam，具体请参考文档：Camera。   Camera Module v2 Logitech C310 价格 ¥200 ¥249 像素 800 万 120 万 分辨率 1080p30，720p60 720p30 USB 摄像头连接上可以用 lsusb 查看：$ lsusb...Bus 001 Device 003: ID 046d:081b Logitech, Inc. Webcam C310然后用 fswebcam、ffmpeg 拍照和录像：# 安装$ sudo apt install fswebcam ffmpeg# 拍照$ fswebcam -r 1280x720 --no-banner image.jpg# 录像$ ffmpeg -f v4l2 -s 640x480 -i /dev/video0 -b:v 1.5M -c:v h264_v4l2m2m -r 24 -s 640x480 video.mp46. GPIO树莓派区别于常规计算机的一个强大功能是它带有 GPIO (general-purpose input/output) ，中文翻译为通用输入输出接口，一般在中文语境下也用 GPIO。树莓派上的不同 GPIO 有以下功能： 电源输出：5V（最大电流输出与电源能力有关）、3.3V（最大 50mA 电流输出）。 输出：高（3.3V）、低（0V），最大 16mA 电流输出。 输入：高（3.3V）、低（0V），带 50kΩ 左右的上/下拉电阻，其中 GPIO2 和 GPIO3 只带上拉电阻，其余可配置为上拉或者下拉。上/下拉表示 IO 口默认是连接到电源还是地。例如，当 IO 口配置为上拉时，外接开关（输入）的另一端就需要接地，这样在开关按下（输入变化）后，正确的低电平信号才能传给 IO。 \t\t\t\t\t\t\t\t 专用功能： PWM (Pulse-width Modulation)，中文脉宽调制 所有 pin 都可以实现软件 PWN GPIO12、GPIO13、GPIO18、GPIO19 带有硬件 PWM 软件PWM 和硬件 PWM 的区别在于：软件 PWM 依靠操作系统的时间分片调度，其占空比并不准确；硬件 PWM 由专有硬件实现，占空比和周期都非常准确 SPI (Serial Peripheral Interface Bus)，中文串行外设接口 SPI0: MOSI (GPIO10); MISO (GPIO9); SCLK (GPIO11); CE0 (GPIO8), CE1 (GPIO7) SPI1: MOSI (GPIO20); MISO (GPIO19); SCLK (GPIO21); CE0 (GPIO18); CE1 (GPIO17); CE2 (GPIO16) I2C (Inter-Integrated Circuit)，中文集成电路总线 Data: (GPIO2); Clock (GPIO3) EEPROM Data: (GPIO0); EEPROM Clock (GPIO1) Serial，串口 TX (GPIO14); RX (GPIO15) 树莓派 4B 板上带有 40-pin 的 GPIO 插头，其引脚分布如下：在命令行输入 pinout 也可以看到引脚分布图，或者访问 Raspberry Pi Pinout 查看更多信息。LED硬件领域的点亮 LED，跟软件行业的 Hello World 一样，是学习一款硬件颇有仪式感的第一步。首先按图示连接元器件，限流电阻可以选 330Ω，3.3v/330Ω = 10mA（LED 工作电流一般 5mA - 20mA），LED 阳极接 GPIO14，阴极接 GND。然后创建 python 脚本，python led.py 运行脚本，LED 有规律的闪起来了。# led.pyfrom gpiozero import LEDfrom time import sleepled = LED(14)led.blink()input()或者按照下图接线，利用 PWM 做个呼吸灯，感受下电子的生命。# pwm.pyfrom gpiozero import PWMLEDfrom time import sleepled = PWMLED(12)led.blink(0.5, 0.5, 2, 2)input()蜂鸣器手边正好有个无源压电蜂鸣器，这里顺带介绍下。常见的蜂鸣器有无源和有源两类，是根据其内部是否带有振荡源区分的。有源蜂鸣器内部自带振荡源，使用时直接通直流电便能发出声音；无源蜂鸣器则需要提供振荡信号才能发出声音。压电指其工作原理利用了压电陶瓷片的电能/机械能转化特性，压电陶瓷片可以把振荡的电信号转化为自身的高频振动挤压周围空气，从而像人的声带一样发出声音。我手上的无源压电蜂鸣器型号是3MMTDK，几毛钱一个，下边是它的特性曲线：蜂鸣器跟树莓派之间的连线也非常简单，直接接到 PWM 输出和地之间即可。运行以下代码，蜂鸣器会一直发出“哔”的声音：from gpiozero import PWMOutputDevicebz = PWMOutputDevice(12, True, 0.5, 4000)input()更高级一点，让它奏一曲真·电音版《铁血丹心》，代码详见 buzzer-player，如果打不开请访问同步的 Gitee 版 buzzer-player。" }, { "title": "树莓派介绍", "url": "/posts/raspberry_pi_introduce/", "categories": "树莓派", "tags": "", "date": "2022-04-22 00:00:00 +0800", "snippet": "树莓派（Raspberry Pi）是英国树莓派基金会开发的微型单板计算机，目的是以低价硬件及自由软件促进学校的基本计算机科学教育。在开始树莓派的介绍前，先简单解释两个名词： 单板计算机、单板机、单板电脑（SBC, Single Board Computer）：是电脑的一种形式，它将计算机的各个部分都组装在一块电路板上，包括微处理器、存储器、输入输出接口等。简单的类比就是：单板计算机相当于不带显示器和键鼠的台式机主机，给它加上显示器、键鼠并安装好操作系统，就可以当电脑使用了，甚至不用显示器、键鼠，仅仅安装好操作系统也可以当微型服务器使用。 自由软件（Free Software）：是一类可以不受限制地自由使用、复制、研究、修改和分发的，尊重用户自由的软件。自由软件不等同于免费软件，同时它本身也并不抵制商业化。自由软件受到选定的”自由软件许可协议协议“保护而发布，其发布以源代码为主。举几个自由软件的例子：GNU/Linux、git、OpenCV、Python等等。常见的自由软件许可证有： 2-clause BSD License (BSD-2-Clause) 3-clause BSD License (BSD-3-Clause) Apache License 2.0 (Apache-2.0) GNU General Public License version 2 (GPL-2.0) GNU General Public License version 3 (GPL-3.0) GNU Lesser General Public License version 2.1 (LGPL-2.1) GNU Lesser General Public License version 3 (LGPL-3.0) MIT License (MIT) 通俗点来说，树莓派是一块电路板，上面焊接好了微处理器（博通 Broadcom）、内存、输入输出接口（USB、Ethernet、HDMI等），在操作系统和自由软件的加持下以微型电脑的形式供人们学习和使用。型号及规格树莓派官网上列有很多不同的型号，其中 Raspberry Pi 4、Raspberry Pi 400、Raspberry Pi Pico、Raspberry Pi Zero 2 W 是最新的四款，分别发布于2019年6月、2020年11月、2021年1月、2021年10月。不同型号的使用场景不同： Pi 4：通用型，可以用来当日常桌面系统、服务器、媒体中心等使用。 Pi 400：Pi 4 的变种，把 Pi 4 集成到了一个键盘里以方便人们日常使用，下边图里那个小白键盘就是 Pi 400，连接电源、显示器和鼠标就可以用了。 Pi Pico：搭载了树莓派基金会自研 32 位 ARM 芯片 RP2040 的小板（51 mm x 21 mm），带 264KB 片上 RAM 和 2MB 板载 Flash，其价格低廉只需要 $4 ，主要用于嵌入式开发。 Pi Zero 2 W：板载 RP3A0（4 核 64 位 ARM Cortex- A53 1GHz），价格 $15，比 Pico 性能强，比 Pi 4 尺寸小（65mm × 30mm），还带 2.4G 无线、蓝牙 4.2、H.264 编解码器，是开发物联网应用的不二之选。 Raspberry Pi 4 规格 配置 树莓派 4B 处理器 Broadcom BCM2711（1.5G 4核 64 位 Cortex A-72 ARM v8） 内存 1GB、2GB、4GB、8GB 可选 LPDDR4-3200 网络 2.4G/5G 802.11 ac 无线、千兆以太网、蓝牙 5.0、低功耗蓝牙（BLE） 接口 2 x USB 3.0、2 x USB 2.0；Micro-SD 卡槽；40 x GPIO；DSI、CSI； 音视频 2 x Micro-HDMI（最高支持 4kp60 + 1080p 或 2 x 4kp30）；3.5mm 编解码器 H.265（4kp60 解码）、H.264（1080p60 解码，1080p30 编码） 供电端口 USB Type-C（5V x 3A） 尺寸 85mm x 56mm Raspberry Pi Zero 2 W 规格 配置 树莓派 Zero 2 W 处理器 Broadcom BCM2710A1（1G 4核 64 位 Cortex-A53） 内存 512MB LPDDR2 网络 2.4GHz 802.11 b/g/n 无线、蓝牙 4.2、低功耗蓝牙（BLE） 接口 Micro USB On-The-Go (OTG) ；Micro-SD 卡槽；40 x GPIO；CSI； 音视频 Mini-HDMI 编解码器 H.264（MPEG-4 1080p30 解码）、H.264（1080p30 编码） 供电端口 Micro USB（5V x 2.5A） 尺寸 65mm x 30mm 安装和使用以树莓派 4B 为例，其不带存储设备和外设，因此全新的树莓派买回来后不能直接使用，还需要以下硬件和步骤： Mirco-SD 卡，用于安装操作系统 键盘、鼠标、显示器（或者电视）操作系统个人电脑上的操作系统，宽泛的来说可以分为三大阵营：Mac OS、Windows、Linux。 Mac OS 是苹果公司开发的，专用在 iMac、MacBook 等产品上的操作系统。 Windows 是微软开发的，用在 PC 上的操作系统，包含从 Windows 95 到 Windows 11 等一系列版本。 Linux 相对于前两种操作系统来说它并不属于某个公司或个人，而是一种自由和开放源码的类 UNIX 操作系统。其内核由林纳斯·托瓦兹在 1991 年 10 月 5 日首次发布，在加上用户空间的应用程序之后，成为 Linux 操作系统。Linux 发行版（Distributions）就是通常所说的“Linux操作系统”，它一般是由一些组织、团体、公司或者个人制作并发行的，像树莓派有针对不同使用场景的型号一样，Linux 发行版也有侧重不同使用目的的版本，较为知名的有 Debian、Ubuntu、Fedora、CentOS、Arch Linux 和 openSUSE 等。树莓派官方操作系统 Raspberry Pi OS（原为 Raspbian）就是 Linux 的一个发行版，基于 Debian 开发。从 2015 年起，树莓派基金会正式将其作为树莓派的官方操作系统。系统安装系统安装本质是把系统文件拷贝到 SD 卡中，使树莓派可以从 SD 卡中读取引导、加载内核，进而启动。以下是安装步骤。1. 下载系统官网提供了不同版本系统的下载选项：Raspberry Pi OS。32 位版本有：非桌面版、桌面版、桌面加推荐软件版；64 位版本当前只有：非桌面版、桌面版。如果由于国内防火墙的原因，从官网下载速度较慢或者无法访问，可以从高校镜像站下载，譬如清华镜像站： 32 位：非桌面版、桌面版、推荐软件版 64 位：非桌面版、桌面版对于第一次使用的用户，推荐安装桌面加推荐软件版。2. 烧录 SD 卡下载好的系统文件是 xz 文件，它是一种使用 LZMA/LZMA2 压缩算法的无损数据压缩文件格式。Raspberry Pi Imager、Etcher、命令行工具 dd 都可以把 xz 文件写到 SD 卡中。2.1 Raspberry Pi ImagerCHOOSE OS 选择下载的系统文件，CHOOSE STORAGE 选择 SD 卡，最后点击 WRITE 等待完成即可。2.2 EtcherSelect image 选择下载的系统文件，Select drive 选择 SD 卡，最后点击 Flash 等待完成即可。2.3 dd对于有洁癖不想安装新软件，或者没有桌面环境的用户，dd 命令行工具是个好选择，但只能在 Mac OS 或者 Linux 下使用。Mac OS 的 Terminal 中输入以下命令：# 0. 解压 xz$ gunzip xxx.img.xz# 1. 查看 SD 卡，/dev/disk2 就是 SD 卡$ diskutil list.../dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *15.9 GB disk2 1: Windows_FAT_32 boot 268.4 MB disk2s1 2: Linux 15.7 GB disk2s2# 2. 卸载 SD 卡，把 diskN 换成相应的硬盘编号（disk2）$ diskutil unmountDisk /dev/diskN# 3. dd 到 SD 卡，把 diskN 换成相应的硬盘编号（disk2）##（一定注意不要看错，否则 dd 会覆盖 Mac OS 的硬盘）##（注意使用 rdisk，'raw disk' 而不是 disk，可以加速写入）$ sudo dd if=xxx.img of=/dev/rdiskN bs=4M conv=fsync# 4. 推出 SD 卡$ diskutil eject /dev/diskN3. 启动系统3.1 连接硬件 烧录好的 SD 卡插入卡槽 接入键盘、鼠标 接入显示器，注意树莓派 4B 是 Micro-HDMI，不是 Mini-HDMI，这两种接口尺寸不一样，不要买错了。 接入电源启动 3.2 初始化系统旧版系统带有一个默认的 “pi” 用户，但 2022 年 4 月 4 日及之后发布的系统里这个默认用户被删掉了，因此初始化系统的第一步是按照安装向导创建新用户。Configuration on First Boot 里有详细的图示说明，如果打不开，请看下边的复本。建议更新软件时选择跳过（skip）。默认源在国外，因为防火墙的原因更新会比较慢，可以等系统初始化完成并换成国内源后再更新。初次使用初始化的时候跳过了软件更新，在正式使用前把它补回来。1. 换源先解释下源这个概念：源全称“软件源”，是 Linux 系统的应用程序安装仓库，很多应用软件都会这收录到这个仓库里。类比的话可以用 Mac OS 的 AppStore 理解，用户想要安装软件，就去仓库（AppStore）里找。再说明下为什么要换源：因为大部分 Linux 官方源（仓库）都在国外，安装速度慢且失败率高，所以要把源（仓库）从国外的官方源换成国内的镜像源。人生苦短，请换源。参考清华镜像站的说明：Raspbian 镜像使用帮助。 首先在终端中输入 uname -m 确定系统架构：aarch64（请以自己的架构信息为准）。 再在镜像站上选择 Raspbian 对应的 Debian 版本：bullseye（请以自己的系统版本为准）。 最后替换 /etc/apt/sources.list 和 /etc/apt/sources.list.d/raspi.list 两个文件内容。 # aarch64 /etc/apt/sources.listdeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free # /etc/apt/sources.list.d/raspi.listdeb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main 2. 更新# 更新包信息$ sudo apt update# 升级软件及其依赖$ sudo apt full-upgrade安装/卸载软件# 安装$ sudo apt install xxx# 卸载，保留配置文件$ sudo apt remove xxx# 卸载，移除配置文件$ sudo apt purge xxx安装中文输入法：sudo apt install fcitx5 fcitx5-chinese-addons3. 应用" } ]
